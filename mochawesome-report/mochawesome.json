{
  "stats": {
    "suites": 11,
    "tests": 43,
    "passes": 43,
    "pending": 0,
    "failures": 0,
    "start": "2021-12-01T13:41:23.010Z",
    "end": "2021-12-01T13:41:23.031Z",
    "duration": 21,
    "testsRegistered": 43,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "28891e53-4d51-44ce-b099-8994f909deed",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1b34af59-08e6-4462-b701-5002a76b6842",
          "title": "add.js",
          "fullFile": "C:\\Koulu\\Software Testing\\Software-Testing-Assignment\\test\\add.test.js",
          "file": "\\test\\add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adds two positive numbers",
              "fullTitle": "add.js Adds two positive numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(10,10)).to.equal(20);",
              "err": {},
              "uuid": "ee80dfb1-49b6-4013-a374-a99fc88a504c",
              "parentUUID": "1b34af59-08e6-4462-b701-5002a76b6842",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds two negative numbers",
              "fullTitle": "add.js Adds two negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-10,-10)).to.equal(-20);",
              "err": {},
              "uuid": "ddb0b1af-133c-4254-84e4-6a374b02705b",
              "parentUUID": "1b34af59-08e6-4462-b701-5002a76b6842",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds a negative to a positive number",
              "fullTitle": "add.js Adds a negative to a positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(10,-10)).to.equal(0);",
              "err": {},
              "uuid": "d0a58478-be2a-47c2-81f3-fd90ec5a3dad",
              "parentUUID": "1b34af59-08e6-4462-b701-5002a76b6842",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adds a positive number to a negative number",
              "fullTitle": "add.js Adds a positive number to a negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-10,10)).to.equal(0);",
              "err": {},
              "uuid": "743e6d36-8baf-4f59-b815-8e0bf72362e7",
              "parentUUID": "1b34af59-08e6-4462-b701-5002a76b6842",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should combine number to string",
              "fullTitle": "add.js Should combine number to string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(10,\"Test\")).to.eql('10Test');",
              "err": {},
              "uuid": "8b1caa3b-1f32-43f7-82c4-19bd3f6bd167",
              "parentUUID": "1b34af59-08e6-4462-b701-5002a76b6842",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should equal NaN when given an array",
              "fullTitle": "add.js Should equal NaN when given an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(10,[1, 2, 3])).to.eql(NaN);",
              "err": {},
              "uuid": "a1ee7e14-2777-4434-add9-615dde049fe3",
              "parentUUID": "1b34af59-08e6-4462-b701-5002a76b6842",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee80dfb1-49b6-4013-a374-a99fc88a504c",
            "ddb0b1af-133c-4254-84e4-6a374b02705b",
            "d0a58478-be2a-47c2-81f3-fd90ec5a3dad",
            "743e6d36-8baf-4f59-b815-8e0bf72362e7",
            "8b1caa3b-1f32-43f7-82c4-19bd3f6bd167",
            "a1ee7e14-2777-4434-add9-615dde049fe3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a2968388-64a2-4e02-8060-41eabff60543",
          "title": "capitalize.js",
          "fullFile": "C:\\Koulu\\Software Testing\\Software-Testing-Assignment\\test\\capitalize.test.js",
          "file": "\\test\\capitalize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return capitalized lowercase string",
              "fullTitle": "capitalize.js Should return capitalized lowercase string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"green apple\")).to.eql('Green apple');",
              "err": {},
              "uuid": "b46994ac-b224-43ee-983f-00a07015f419",
              "parentUUID": "a2968388-64a2-4e02-8060-41eabff60543",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return capitalize uppercase string",
              "fullTitle": "capitalize.js Should return capitalize uppercase string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"GREEN APPLE\")).to.eql('Green apple');",
              "err": {},
              "uuid": "8346d0aa-62ae-4442-8364-491edb5694ef",
              "parentUUID": "a2968388-64a2-4e02-8060-41eabff60543",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return string when given a number",
              "fullTitle": "capitalize.js Should return string when given a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(12345)).to.equal('12345');",
              "err": {},
              "uuid": "4716e635-c361-4ad1-b5fe-76014c4baed6",
              "parentUUID": "a2968388-64a2-4e02-8060-41eabff60543",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should combine array of strings and capitalize first letter",
              "fullTitle": "capitalize.js Should combine array of strings and capitalize first letter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(['green', 'apple'])).to.equal('Green,apple');",
              "err": {},
              "uuid": "816b4128-51bb-4496-afbf-30c0da79a5a1",
              "parentUUID": "a2968388-64a2-4e02-8060-41eabff60543",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b46994ac-b224-43ee-983f-00a07015f419",
            "8346d0aa-62ae-4442-8364-491edb5694ef",
            "4716e635-c361-4ad1-b5fe-76014c4baed6",
            "816b4128-51bb-4496-afbf-30c0da79a5a1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ac1054ed-a522-46ff-b835-7d0b17ffe094",
          "title": "difference.js",
          "fullFile": "C:\\Koulu\\Software Testing\\Software-Testing-Assignment\\test\\difference.test.js",
          "file": "\\test\\difference.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return array without any 'Banana' or 'Tomato' strings",
              "fullTitle": "difference.js Should return array without any 'Banana' or 'Tomato' strings",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(difference(input, ['Banana', 'Tomato'])).to.eql(['Green Apple',  'Potato']);",
              "err": {},
              "uuid": "6fe8aa50-cc3e-4cbe-8906-6634fbf2eae0",
              "parentUUID": "ac1054ed-a522-46ff-b835-7d0b17ffe094",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return array without specified numbers",
              "fullTitle": "difference.js Should return array without specified numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(difference([0, 1, 2, 3], [0, 1])).to.eql([2,  3]);",
              "err": {},
              "uuid": "0363c015-65dc-4983-91f1-9d0d23dcec95",
              "parentUUID": "ac1054ed-a522-46ff-b835-7d0b17ffe094",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array if parameter is non-array",
              "fullTitle": "difference.js Should return empty array if parameter is non-array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(difference(1, [0, 1])).to.eql([]);",
              "err": {},
              "uuid": "bc9526f5-a434-46ab-83d2-9f484fb5ba79",
              "parentUUID": "ac1054ed-a522-46ff-b835-7d0b17ffe094",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array with string parameter",
              "fullTitle": "difference.js Should return empty array with string parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(difference('GreAen Apbple', ['A', 'b'])).to.eql([]);",
              "err": {},
              "uuid": "4a988bf3-265c-409d-9936-7bb5d6474c39",
              "parentUUID": "ac1054ed-a522-46ff-b835-7d0b17ffe094",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6fe8aa50-cc3e-4cbe-8906-6634fbf2eae0",
            "0363c015-65dc-4983-91f1-9d0d23dcec95",
            "bc9526f5-a434-46ab-83d2-9f484fb5ba79",
            "4a988bf3-265c-409d-9936-7bb5d6474c39"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ef273e23-91da-4ea7-b99a-b3917e8c5037",
          "title": "filter.js",
          "fullFile": "C:\\Koulu\\Software Testing\\Software-Testing-Assignment\\test\\filter.test.js",
          "file": "\\test\\filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should select bananas",
              "fullTitle": "filter.js Should select bananas",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(input, (product) => product == 'Banana')).to.eql(['Banana', 'Banana']);",
              "err": {},
              "uuid": "a55b1cf9-cf98-4513-a65d-3e1ee371749a",
              "parentUUID": "ef273e23-91da-4ea7-b99a-b3917e8c5037",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should exclude bananas",
              "fullTitle": "filter.js Should exclude bananas",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(input, (product) => product != 'Banana')).to.eql(['Green Apple', 'Tomato', 'Potato']);",
              "err": {},
              "uuid": "3594a1f2-3a19-44f2-a451-35427bed2623",
              "parentUUID": "ef273e23-91da-4ea7-b99a-b3917e8c5037",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should filter letters from string",
              "fullTitle": "filter.js Should filter letters from string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(stringInput, (product) => product == 'o')).to.eql(['o', 'o','o', 'o']);",
              "err": {},
              "uuid": "d6ba4258-d2a7-4ef4-bf56-2bb0ed8fd88e",
              "parentUUID": "ef273e23-91da-4ea7-b99a-b3917e8c5037",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array if not array",
              "fullTitle": "filter.js Should return empty array if not array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter(12345, (product) => product == 12345)).to.eql([[]]);",
              "err": {},
              "uuid": "3dadf496-421a-4c27-9d47-3651cb8f6c26",
              "parentUUID": "ef273e23-91da-4ea7-b99a-b3917e8c5037",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a55b1cf9-cf98-4513-a65d-3e1ee371749a",
            "3594a1f2-3a19-44f2-a451-35427bed2623",
            "d6ba4258-d2a7-4ef4-bf56-2bb0ed8fd88e",
            "3dadf496-421a-4c27-9d47-3651cb8f6c26"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bd68edfc-0553-45c8-89cf-519019e7f80a",
          "title": "integration tests",
          "fullFile": "C:\\Koulu\\Software Testing\\Software-Testing-Assignment\\test\\integration.test.js",
          "file": "\\test\\integration.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "filter, words and difference integration",
              "fullTitle": "integration tests filter, words and difference integration",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const searchWords = words(searchInput);\nconst results = filter(input, product => {\n    const productWords = words(product);\n    for (const searchWord of searchWords) {\n        for (const productWord of productWords) {\n            if(productWord === searchWord) {\n                return product;\n            }\n        }\n    }\n});\nexpect(results).to.eql([ 'Green Apple', 'Blue Tomato', 'Blue Banana' ]);",
              "err": {},
              "uuid": "36e5805f-53c7-481b-b5d1-611a2ffa70b0",
              "parentUUID": "bd68edfc-0553-45c8-89cf-519019e7f80a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reduce and add integration",
              "fullTitle": "integration tests reduce and add integration",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reduce(numberArray, (sum, n) => add(sum,n), 0)).to.eql(229);",
              "err": {},
              "uuid": "7f414561-53e5-49ef-bad1-bf43579507ab",
              "parentUUID": "bd68edfc-0553-45c8-89cf-519019e7f80a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "keys and words integration",
              "fullTitle": "integration tests keys and words integration",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productInfo = \"Banana, vegetable\";\nconst productObject = {name: null, category: null};\nconst productKeys = keys(productObject);\nconst productWords = words(productInfo);\nconst result = productKeys[0] + \": \" + productWords[0]+ \" \" + productKeys[1] + \": \" + productWords[1]\nexpect(result).to.eql(\"name: Banana category: vegetable\");",
              "err": {},
              "uuid": "467c4c37-dbcd-4c9d-9cdc-e05fabf20323",
              "parentUUID": "bd68edfc-0553-45c8-89cf-519019e7f80a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "keys and isArrayLike integration",
              "fullTitle": "integration tests keys and isArrayLike integration",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productObject = {name: null, category: null};\nconst productKeys = keys(productObject);\nexpect(isArrayLike(productKeys)).to.eql(true);",
              "err": {},
              "uuid": "59bbfa5e-463b-41bd-9524-4cda85875d8d",
              "parentUUID": "bd68edfc-0553-45c8-89cf-519019e7f80a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "36e5805f-53c7-481b-b5d1-611a2ffa70b0",
            "7f414561-53e5-49ef-bad1-bf43579507ab",
            "467c4c37-dbcd-4c9d-9cdc-e05fabf20323",
            "59bbfa5e-463b-41bd-9524-4cda85875d8d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2d39ac9d-f58f-4e24-833d-dc541322d38a",
          "title": "keys.js",
          "fullFile": "C:\\Koulu\\Software Testing\\Software-Testing-Assignment\\test\\keys.test.js",
          "file": "\\test\\keys.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return keys of object",
              "fullTitle": "keys.js Should return keys of object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(keys({name:'Green Apple', category: \"fruit\"})).to.eql(['name', 'category']);",
              "err": {},
              "uuid": "9313bbfb-5225-4c70-aec6-05262746950a",
              "parentUUID": "2d39ac9d-f58f-4e24-833d-dc541322d38a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return indexes of array",
              "fullTitle": "keys.js Should return indexes of array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(keys(objectInput)).to.eql([ '0', '1', '2', '3', '4' ]);",
              "err": {},
              "uuid": "415a5656-4414-4497-9c12-b34767b6f387",
              "parentUUID": "2d39ac9d-f58f-4e24-833d-dc541322d38a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return indexes of string",
              "fullTitle": "keys.js Should return indexes of string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(keys(\"Test\")).to.eql([ '0', '1', '2', '3']);",
              "err": {},
              "uuid": "3119d23e-3d7f-4dcc-b510-794734879a87",
              "parentUUID": "2d39ac9d-f58f-4e24-833d-dc541322d38a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array with number parameter",
              "fullTitle": "keys.js Should return empty array with number parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(keys(12345)).to.eql([]);",
              "err": {},
              "uuid": "bf6db183-bf80-40a6-b518-470e1cd75f4e",
              "parentUUID": "2d39ac9d-f58f-4e24-833d-dc541322d38a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9313bbfb-5225-4c70-aec6-05262746950a",
            "415a5656-4414-4497-9c12-b34767b6f387",
            "3119d23e-3d7f-4dcc-b510-794734879a87",
            "bf6db183-bf80-40a6-b518-470e1cd75f4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "28aff2c0-c479-4dbc-9f89-499c43633fb2",
          "title": "map.js",
          "fullFile": "C:\\Koulu\\Software Testing\\Software-Testing-Assignment\\test\\map.test.js",
          "file": "\\test\\map.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should apply a 40% discount to products in array",
              "fullTitle": "map.js Should apply a 40% discount to products in array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(map(objectInput, discount)).to.eql(objectsDiscount);",
              "err": {},
              "uuid": "057750e7-3f39-4027-9e7f-1e7f432da437",
              "parentUUID": "28aff2c0-c479-4dbc-9f89-499c43633fb2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should create an array of uppercase letters",
              "fullTitle": "map.js Should create an array of uppercase letters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(map('green apple', makeUpperCase)).to.eql(['G','R','E','E','N',' ','A','P','P','L','E']);",
              "err": {},
              "uuid": "caebe065-3ee8-42cd-b78b-fc8b966a3cfe",
              "parentUUID": "28aff2c0-c479-4dbc-9f89-499c43633fb2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return array with undefined as it's only item",
              "fullTitle": "map.js Should return array with undefined as it's only item",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(map(1000, discount)).to.eql([undefined]);",
              "err": {},
              "uuid": "7ee04b74-8b77-4b8d-bdf1-1198e775a6c0",
              "parentUUID": "28aff2c0-c479-4dbc-9f89-499c43633fb2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "057750e7-3f39-4027-9e7f-1e7f432da437",
            "caebe065-3ee8-42cd-b78b-fc8b966a3cfe",
            "7ee04b74-8b77-4b8d-bdf1-1198e775a6c0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "94f973ba-cd36-4e96-a8df-b402913c31ce",
          "title": "reduce.js",
          "fullFile": "C:\\Koulu\\Software Testing\\Software-Testing-Assignment\\test\\reduce.test.js",
          "file": "\\test\\reduce.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should calculate cumulative sum",
              "fullTitle": "reduce.js Should calculate cumulative sum",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reduce(numberArray, (sum, n) => sum + n, 0)).to.eql(229);",
              "err": {},
              "uuid": "d92d74fa-8a71-43b7-b87e-6e992df3adf4",
              "parentUUID": "94f973ba-cd36-4e96-a8df-b402913c31ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return array of vegetables",
              "fullTitle": "reduce.js Should return array of vegetables",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reduce(objectInput, (result, n) => {\n    if(n.category === 'vegetable') {      \n        result.push(n);          \n        return result;\n    }\n    return result;\n}, [])).to.eql([{name:'Tomato', category: \"vegetable\"}, {name:'Potato', category: \"vegetable\"}]);",
              "err": {},
              "uuid": "91dbc1c5-17e7-431b-9007-bbaf55111e63",
              "parentUUID": "94f973ba-cd36-4e96-a8df-b402913c31ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should reduce with a string parameter",
              "fullTitle": "reduce.js Should reduce with a string parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reduce(\"World\", (sum, n) => sum + n, \"Hello \")).to.eql('Hello World');",
              "err": {},
              "uuid": "b219246e-a1f7-4b46-ac08-1f4abff63afe",
              "parentUUID": "94f973ba-cd36-4e96-a8df-b402913c31ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should reduce with a number parameter",
              "fullTitle": "reduce.js Should reduce with a number parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reduce(100, (sum, n) => sum + n, 50)).to.equal(50);",
              "err": {},
              "uuid": "8db273e5-45a4-4e21-a387-a561cd595bb8",
              "parentUUID": "94f973ba-cd36-4e96-a8df-b402913c31ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d92d74fa-8a71-43b7-b87e-6e992df3adf4",
            "91dbc1c5-17e7-431b-9007-bbaf55111e63",
            "b219246e-a1f7-4b46-ac08-1f4abff63afe",
            "8db273e5-45a4-4e21-a387-a561cd595bb8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4f91f56c-e202-4287-adac-bb2ac30ec4f1",
          "title": "toNumber.js",
          "fullFile": "C:\\Koulu\\Software Testing\\Software-Testing-Assignment\\test\\toNumber.test.js",
          "file": "\\test\\toNumber.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return number",
              "fullTitle": "toNumber.js Should return number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('15')).to.eql(15);",
              "err": {},
              "uuid": "c19a4268-cc31-4155-a7c9-fec7e5cf7e7f",
              "parentUUID": "4f91f56c-e202-4287-adac-bb2ac30ec4f1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return NaN with non-number string parameter",
              "fullTitle": "toNumber.js Should return NaN with non-number string parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('Number12')).to.eql(NaN);",
              "err": {},
              "uuid": "c3a6fb11-429f-40b9-a11a-aef86960379a",
              "parentUUID": "4f91f56c-e202-4287-adac-bb2ac30ec4f1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return NaN with array parameter",
              "fullTitle": "toNumber.js Should return NaN with array parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber([1,2])).to.eql(NaN);",
              "err": {},
              "uuid": "6551986b-3a4d-4344-9b4e-9a31a48b6ba4",
              "parentUUID": "4f91f56c-e202-4287-adac-bb2ac30ec4f1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c19a4268-cc31-4155-a7c9-fec7e5cf7e7f",
            "c3a6fb11-429f-40b9-a11a-aef86960379a",
            "6551986b-3a4d-4344-9b4e-9a31a48b6ba4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9ae335b5-c158-4e2a-8d1b-26cce45ad7dc",
          "title": "toString.js",
          "fullFile": "C:\\Koulu\\Software Testing\\Software-Testing-Assignment\\test\\toString.test.js",
          "file": "\\test\\toString.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return string from a number",
              "fullTitle": "toString.js Should return string from a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(15)).to.eql('15');",
              "err": {},
              "uuid": "fb91fa54-9e76-4838-b8ef-fa4e0bc0cf39",
              "parentUUID": "9ae335b5-c158-4e2a-8d1b-26cce45ad7dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return string with string parameter",
              "fullTitle": "toString.js Should return string with string parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString('Steak')).to.eql('Steak');",
              "err": {},
              "uuid": "63a0c7e6-ac9e-418c-8816-4fe80354f645",
              "parentUUID": "9ae335b5-c158-4e2a-8d1b-26cce45ad7dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return string when given array parameter",
              "fullTitle": "toString.js Should return string when given array parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString([1,2,3])).to.eql('1,2,3');",
              "err": {},
              "uuid": "59f08dff-f0d2-4200-9bee-b6c6d086b592",
              "parentUUID": "9ae335b5-c158-4e2a-8d1b-26cce45ad7dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return [object Object] with object parameter",
              "fullTitle": "toString.js Should return [object Object] with object parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = toString({name: 'Steak', category: 'meat'});\nconsole.log(result);\nexpect(toString({name: 'Steak', category: 'meat'})).to.eql(\"[object Object]\");",
              "err": {},
              "uuid": "7183459c-c318-442c-a274-658d1085d87c",
              "parentUUID": "9ae335b5-c158-4e2a-8d1b-26cce45ad7dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb91fa54-9e76-4838-b8ef-fa4e0bc0cf39",
            "63a0c7e6-ac9e-418c-8816-4fe80354f645",
            "59f08dff-f0d2-4200-9bee-b6c6d086b592",
            "7183459c-c318-442c-a274-658d1085d87c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9eaeb2c0-4229-450f-8bb3-8997b5d0acb8",
          "title": "words.js",
          "fullFile": "C:\\Koulu\\Software Testing\\Software-Testing-Assignment\\test\\words.test.js",
          "file": "\\test\\words.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return array of words",
              "fullTitle": "words.js Should return array of words",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(words(stringInput)).to.eql(['Green' ,'Apple', 'Tomato', 'Banana', 'Potato']);",
              "err": {},
              "uuid": "b0f254e0-39cc-4b6c-9768-db09f05cca21",
              "parentUUID": "9eaeb2c0-4229-450f-8bb3-8997b5d0acb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error for array parameter",
              "fullTitle": "words.js Should throw an error for array parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(function() {words(input);}).to.throw();",
              "err": {},
              "uuid": "34e594bf-7cc1-42b9-8582-10583d35ebeb",
              "parentUUID": "9eaeb2c0-4229-450f-8bb3-8997b5d0acb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return string matching the pattern",
              "fullTitle": "words.js Should return string matching the pattern",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(words(stringInput, 'Green Apple')).to.eql(['Green Apple']);",
              "err": {},
              "uuid": "b9c954e8-cef4-4d2e-91ef-b8e23f98ace5",
              "parentUUID": "9eaeb2c0-4229-450f-8bb3-8997b5d0acb8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b0f254e0-39cc-4b6c-9768-db09f05cca21",
            "34e594bf-7cc1-42b9-8582-10583d35ebeb",
            "b9c954e8-cef4-4d2e-91ef-b8e23f98ace5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}